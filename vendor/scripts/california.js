/* California.js v0.1
 * Copyright (c) 2014 Joe Liversedge (@jliverse)
 * MIT License
 *****************************************************************************/
module.exports = (function (require, exports, module) {
  'use strict';

  var functions = require('california-functions');

  var forEach = require('async-foreach').forEach;

  /**
   * Optionally map all the values in the given Array using a provided map
   * function and determine if all the values in the array are strictly equal.
   * @param self an array-like object
   * @param fn the callback function to map each value in the array
   */
  var _arrayValuesAreEqual = function (array, fn) {
    var mapped = (fn) ? array.map(fn) : array;
    if (mapped.length === 0) {
      return true;
    }

    for (var i = 1; i < mapped.length; i++) {
      if (mapped[i] !== mapped[0]) {
        return false;
      }
    }
    return true;
  };

  /**
   * A factory for Fonts.
   */
  var FontFactory = function () {

    var namesAndInstances = {};

    /**
     * A simple representation of a font.
     * @param the name of the font, e.g., 'Comic Sans MS'
     */
    function Font(name) {
      this.name = name;
    }

    /**
     * Get the width of the given text with the font name.
     * This is provided by Font instances generated by the FontFactory.
     */
    Font.prototype.measureText = function () {
      return 0;
    };

    return {

      /**
       * A Font factory method that caches font instances by name.
       */
      fontWithName: function (name) {

        var instance = namesAndInstances[name];
        if (instance) {
          return instance;
        }

        // TODO: Check that the Canvas is supported.
        // Create a canvas (not attached to the DOM).
        var canvas = functions.element('canvas', {
          width: 320,
          height: 320
        });

        // Set the font and associate the canvas' drawing
        // context with the name of the font.
        canvas.getContext = canvas.getContext || function() { return {}; };
        var context2d = canvas.getContext('2d');
        context2d.font = '36px "' + name + '", AdobeBlank, monospace';

        // Create the new Font and override its measureText function to use
        // a new closure using the canvas and context we created.
        instance = new Font(name);
        instance.measureText = function (text) {
          return context2d.measureText(text);
        };
        instance.containsGlyph = function (text) {
          return this.measureText(text).width !== baseFont.measureText(text).width;
        };
        instance.containsCodePoint = function (codePoint) {
          return this.containsGlyph(String.fromCharCode(codePoint));
        };
        instance.allGlyphs = function () {
          var glyph,
              glyphs = [];

          for (var codePoint = 32; codePoint < 65536; codePoint++) {
            glyph = String.fromCharCode(codePoint);
            if (this.containsGlyph(glyph)) {
              glyphs.push(glyph);
            }
          }
          return glyphs;
        };

        namesAndInstances[name] = instance;
        return instance;
      }
    };
  };

  /**
   * Get the metrics for the given glyph using the provided array of Fonts.
   * @param glyph a glyph to use when calculating the font widths
   * @param fonts an array of Fonts
   */
  var _glyphMetricsWithFonts = function (glyph, fonts) {
    var widths = [];
    forEach(fonts, function (font) {
      var done = this.async();
      widths.push(font.measureText(glyph));
      done();
    });
    return widths;
  };

  /**
   * Determine if the widths of the glyph are
   * identical for all the provided Fonts.
   * @param glyph a glyph to use in the comparison
   * @param fonts an array of Fonts to compare
   */
  var _isWidthEqualWithGlyphAndFonts = function (glyph, fonts) {
    return _arrayValuesAreEqual(_glyphMetricsWithFonts(32, fonts), function (item) {
      return item.width;
    });
  };

  // Instance variables.
  ////////////////////////////////////////////////////////////////////////////

  var fontFactory = new FontFactory(),
         baseFont = fontFactory.fontWithName('AdobeBlank');

  /**
   * Expose the factory method.
   */
  module.exports.fontWithName = fontFactory.fontWithName;

  /**
   * Determine whether the browser environment has glyphs for the given font name.
   * @param name the name of the font
   * @return true, if the browser environment has glyphs for the given font name.
   */
  module.exports.hasFont = function (name) {

    // Compare our base font (Adobe Blank) with the given font name.
    var fonts = [ baseFont, fontFactory.fontWithName('monospace'), fontFactory.fontWithName(name) ];

    // A font could have only one glyph at 0x19, but the repertoire
    // starts (by convention) at the Unicode 'SPACE' (hex 0x20, decimal 32).
    for (var codePoint = 32; codePoint < 65536; codePoint++) {
      if (!_isWidthEqualWithGlyphAndFonts(String.fromCharCode(codePoint), fonts)) {
        return true;
      }
    }

    return false;
  };

  return exports;
}(require, exports, module));
